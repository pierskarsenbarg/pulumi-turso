// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGroup(args: GetGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("turso:index:getGroup", {
        "groupName": args.groupName,
        "organizationName": args.organizationName,
    }, opts);
}

export interface GetGroupArgs {
    groupName: string;
    organizationName: string;
}

export interface GetGroupResult {
    /**
     * The current libSQL server version the databases in that group are running.
     */
    readonly dbVersion: string;
    /**
     * The group universal unique identifier (UUID).
     */
    readonly groupId: string;
    /**
     * An array of location keys the group is located.
     */
    readonly locations?: string[];
    /**
     * The group name, unique across your organization.
     */
    readonly name: string;
    /**
     * The name of the organization or user.
     */
    readonly organization: string;
    /**
     * The primary location key.
     */
    readonly primaryLocation: string;
}
export function getGroupOutput(args: GetGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupResult> {
    return pulumi.output(args).apply((a: any) => getGroup(a, opts))
}

export interface GetGroupOutputArgs {
    groupName: pulumi.Input<string>;
    organizationName: pulumi.Input<string>;
}
