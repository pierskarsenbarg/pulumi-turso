// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage a Turso database
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'turso:index:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * The database universal unique identifier (UUID).
     */
    public /*out*/ readonly dbId!: pulumi.Output<string>;
    /**
     * The name of the group where the database was created.
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * The DNS hostname used for client libSQL and HTTP connections.
     */
    public /*out*/ readonly hostName!: pulumi.Output<string>;
    /**
     * The database name, unique across your organization.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the organization or user that created the database.
     */
    public readonly organizationName!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationName"] = (args ? args.organizationName : undefined) ?? (utilities.getEnv("TURSO_ORGANISATIONNAME") || "");
            resourceInputs["dbId"] = undefined /*out*/;
            resourceInputs["hostName"] = undefined /*out*/;
        } else {
            resourceInputs["dbId"] = undefined /*out*/;
            resourceInputs["groupName"] = undefined /*out*/;
            resourceInputs["hostName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organizationName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["hostName"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * The name of the group where the database should be created. **The group must already exist.**
     */
    groupName: pulumi.Input<string>;
    /**
     * The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 32 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the organization or user.
     */
    organizationName?: pulumi.Input<string>;
}
