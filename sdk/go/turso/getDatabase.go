// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package turso

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-turso/sdk/go/turso/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupDatabase(ctx *pulumi.Context, args *LookupDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseResult
	err := ctx.Invoke("turso:index:getDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDatabaseArgs struct {
	DatabaseName     string `pulumi:"databaseName"`
	OrganizationName string `pulumi:"organizationName"`
}

type LookupDatabaseResult struct {
	// The database universal unique identifier (UUID).
	DbId string `pulumi:"dbId"`
	// The name of the group where the database was created.
	GroupName string `pulumi:"groupName"`
	// The DNS hostname used for client libSQL and HTTP connections.
	HostName string `pulumi:"hostName"`
	// The database name, unique across your organization.
	Name string `pulumi:"name"`
	// The name of the organization or user that created the database.
	OrganizationName string `pulumi:"organizationName"`
}

func LookupDatabaseOutput(ctx *pulumi.Context, args LookupDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDatabaseArgs](args.ToOutput(), func(plainArgs *LookupDatabaseArgs) (*LookupDatabaseResult, error) {
		return LookupDatabase(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDatabaseResultOutput, *LookupDatabaseResult](outputResult)
}

type LookupDatabaseOutputArgs struct {
	DatabaseName     pulumix.Input[string] `pulumi:"databaseName"`
	OrganizationName pulumix.Input[string] `pulumi:"organizationName"`
}

func (args LookupDatabaseOutputArgs) ToOutput() pulumix.Output[*LookupDatabaseArgs] {
	allArgs := pulumix.All(
		args.DatabaseName.ToOutput(context.Background()).AsAny(),
		args.OrganizationName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDatabaseArgs {
		return &LookupDatabaseArgs{
			DatabaseName:     resolvedArgs[0].(string),
			OrganizationName: resolvedArgs[1].(string),
		}
	})
}

type LookupDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseResult)(nil)).Elem()
}

func (o LookupDatabaseResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDatabaseResult] {
	return pulumix.Output[*LookupDatabaseResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDatabaseResultOutput) DbId() pulumix.Output[string] {
	return pulumix.Apply[*LookupDatabaseResult](o, func(v *LookupDatabaseResult) string { return v.DbId })
}

func (o LookupDatabaseResultOutput) GroupName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDatabaseResult](o, func(v *LookupDatabaseResult) string { return v.GroupName })
}

func (o LookupDatabaseResultOutput) HostName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDatabaseResult](o, func(v *LookupDatabaseResult) string { return v.HostName })
}

func (o LookupDatabaseResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupDatabaseResult](o, func(v *LookupDatabaseResult) string { return v.Name })
}

func (o LookupDatabaseResultOutput) OrganizationName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDatabaseResult](o, func(v *LookupDatabaseResult) string { return v.OrganizationName })
}
