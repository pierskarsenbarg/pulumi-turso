// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package turso

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-turso/sdk/go/turso/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupResult
	err := ctx.Invoke("turso:index:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGroupArgs struct {
	GroupName        string `pulumi:"groupName"`
	OrganizationName string `pulumi:"organizationName"`
}

type LookupGroupResult struct {
	// The current libSQL server version the databases in that group are running.
	DbVersion string `pulumi:"dbVersion"`
	// The group universal unique identifier (UUID).
	GroupId string `pulumi:"groupId"`
	// An array of location keys the group is located.
	Locations []string `pulumi:"locations"`
	// The group name, unique across your organization.
	Name string `pulumi:"name"`
	// The name of the organization or user.
	Organization string `pulumi:"organization"`
	// The primary location key.
	PrimaryLocation string `pulumi:"primaryLocation"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupGroupArgs](args.ToOutput(), func(plainArgs *LookupGroupArgs) (*LookupGroupResult, error) {
		return LookupGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupGroupResultOutput, *LookupGroupResult](outputResult)
}

type LookupGroupOutputArgs struct {
	GroupName        pulumix.Input[string] `pulumi:"groupName"`
	OrganizationName pulumix.Input[string] `pulumi:"organizationName"`
}

func (args LookupGroupOutputArgs) ToOutput() pulumix.Output[*LookupGroupArgs] {
	allArgs := pulumix.All(
		args.GroupName.ToOutput(context.Background()).AsAny(),
		args.OrganizationName.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupGroupArgs {
		return &LookupGroupArgs{
			GroupName:        resolvedArgs[0].(string),
			OrganizationName: resolvedArgs[1].(string),
		}
	})
}

type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupGroupResult] {
	return pulumix.Output[*LookupGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupGroupResultOutput) DbVersion() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.DbVersion })
}

func (o LookupGroupResultOutput) GroupId() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.GroupId })
}

func (o LookupGroupResultOutput) Locations() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) []string { return v.Locations })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupGroupResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Name })
}

func (o LookupGroupResultOutput) Organization() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.Organization })
}

func (o LookupGroupResultOutput) PrimaryLocation() pulumix.Output[string] {
	return pulumix.Apply[*LookupGroupResult](o, func(v *LookupGroupResult) string { return v.PrimaryLocation })
}
