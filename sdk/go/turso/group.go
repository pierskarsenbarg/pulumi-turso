// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package turso

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-turso/sdk/go/turso/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Group struct {
	pulumi.CustomResourceState

	// The current libSQL server version the databases in that group are running.
	DbVersion pulumix.Output[string] `pulumi:"dbVersion"`
	// The group universal unique identifier (UUID).
	GroupId pulumix.Output[string] `pulumi:"groupId"`
	// An array of location keys the group is located.
	Locations pulumix.ArrayOutput[string] `pulumi:"locations"`
	// The group name, unique across your organization.
	Name pulumix.Output[string] `pulumi:"name"`
	// The name of the organization or user.
	Organization pulumix.Output[string] `pulumi:"organization"`
	// The primary location key.
	PrimaryLocation pulumix.Output[string] `pulumi:"primaryLocation"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.PrimaryLocation == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryLocation'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("turso:index:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("turso:index:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
}

type GroupState struct {
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// An array of location keys the group is located.
	Locations []string `pulumi:"locations"`
	// The name of the new group.
	Name *string `pulumi:"name"`
	// The name of the organization or user.
	Organization string `pulumi:"organization"`
	// The primary location key for the new group.
	PrimaryLocation string `pulumi:"primaryLocation"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// An array of location keys the group is located.
	Locations pulumix.Input[[]string]
	// The name of the new group.
	Name pulumix.Input[*string]
	// The name of the organization or user.
	Organization pulumix.Input[string]
	// The primary location key for the new group.
	PrimaryLocation pulumix.Input[string]
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

func (o GroupOutput) ToOutput(ctx context.Context) pulumix.Output[Group] {
	return pulumix.Output[Group]{
		OutputState: o.OutputState,
	}
}

// The current libSQL server version the databases in that group are running.
func (o GroupOutput) DbVersion() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.DbVersion })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The group universal unique identifier (UUID).
func (o GroupOutput) GroupId() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.GroupId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An array of location keys the group is located.
func (o GroupOutput) Locations() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.ArrayOutput[string] { return v.Locations })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The group name, unique across your organization.
func (o GroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the organization or user.
func (o GroupOutput) Organization() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.Organization })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The primary location key.
func (o GroupOutput) PrimaryLocation() pulumix.Output[string] {
	value := pulumix.Apply[Group](o, func(v Group) pulumix.Output[string] { return v.PrimaryLocation })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(GroupOutput{})
}
