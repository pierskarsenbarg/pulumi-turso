# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDatabaseResult',
    'AwaitableGetDatabaseResult',
    'get_database',
    'get_database_output',
]

@pulumi.output_type
class GetDatabaseResult:
    def __init__(__self__, db_id=None, group_name=None, host_name=None, name=None, organization_name=None):
        if db_id and not isinstance(db_id, str):
            raise TypeError("Expected argument 'db_id' to be a str")
        pulumi.set(__self__, "db_id", db_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_name and not isinstance(organization_name, str):
            raise TypeError("Expected argument 'organization_name' to be a str")
        pulumi.set(__self__, "organization_name", organization_name)

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> str:
        """
        The database universal unique identifier (UUID).
        """
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        The name of the group where the database was created.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The DNS hostname used for client libSQL and HTTP connections.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The database name, unique across your organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        """
        The name of the organization or user that created the database.
        """
        return pulumi.get(self, "organization_name")


class AwaitableGetDatabaseResult(GetDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseResult(
            db_id=self.db_id,
            group_name=self.group_name,
            host_name=self.host_name,
            name=self.name,
            organization_name=self.organization_name)


def get_database(database_name: Optional[str] = None,
                 organization_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['databaseName'] = database_name
    __args__['organizationName'] = organization_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('turso:index:getDatabase', __args__, opts=opts, typ=GetDatabaseResult).value

    return AwaitableGetDatabaseResult(
        db_id=pulumi.get(__ret__, 'db_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        host_name=pulumi.get(__ret__, 'host_name'),
        name=pulumi.get(__ret__, 'name'),
        organization_name=pulumi.get(__ret__, 'organization_name'))


@_utilities.lift_output_func(get_database)
def get_database_output(database_name: Optional[pulumi.Input[str]] = None,
                        organization_name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabaseResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
