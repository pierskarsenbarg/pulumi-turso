# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    def __init__(__self__, db_version=None, group_id=None, locations=None, name=None, organization=None, primary_location=None):
        if db_version and not isinstance(db_version, str):
            raise TypeError("Expected argument 'db_version' to be a str")
        pulumi.set(__self__, "db_version", db_version)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if primary_location and not isinstance(primary_location, str):
            raise TypeError("Expected argument 'primary_location' to be a str")
        pulumi.set(__self__, "primary_location", primary_location)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        The current libSQL server version the databases in that group are running.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The group universal unique identifier (UUID).
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        """
        An array of location keys the group is located.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The group name, unique across your organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The name of the organization or user.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="primaryLocation")
    def primary_location(self) -> str:
        """
        The primary location key.
        """
        return pulumi.get(self, "primary_location")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            db_version=self.db_version,
            group_id=self.group_id,
            locations=self.locations,
            name=self.name,
            organization=self.organization,
            primary_location=self.primary_location)


def get_group(group_name: Optional[str] = None,
              organization_name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['groupName'] = group_name
    __args__['organizationName'] = organization_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('turso:index:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        db_version=pulumi.get(__ret__, 'db_version'),
        group_id=pulumi.get(__ret__, 'group_id'),
        locations=pulumi.get(__ret__, 'locations'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        primary_location=pulumi.get(__ret__, 'primary_location'))


@_utilities.lift_output_func(get_group)
def get_group_output(group_name: Optional[pulumi.Input[str]] = None,
                     organization_name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
